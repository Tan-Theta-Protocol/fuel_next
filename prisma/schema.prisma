generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model approvals {
  id             Int     @id @default(autoincrement())
  poll_id        BigInt
  approved_by    Json?
  approval_count BigInt?
  deniel_count   BigInt?

  @@index([poll_id], map: "idx_approvals_poll_id")
}

model commision_details_v2 {
  id                 BigInt  @id @default(autoincrement())
  user_id            String? @db.LongText
  transaction_id     BigInt?
  poll_id            BigInt?
  amount             Float?
  third_party_amount Float?
}

model crashes_v2 {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamp(0)
  crash      String    @db.LongText
  identifier String    @db.LongText
}

model deactivate_accounts_v2 {
  id                BigInt    @id @default(autoincrement())
  user_id           String?   @unique(map: "uni_deactivate_accounts_v2_user_id")
  deactivation_time DateTime?
  deactivate_status Boolean?
  created_at        DateTime? @default(now()) @db.Timestamp(0)
  updated_at        DateTime? @default(now()) @db.Timestamp(0)
  users_v2          users_v2? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_deactivate_accounts_v2_user")
}

model feul_wallets_v2 {
  id             String  @id
  user_id        String  @unique(map: "uni_feul_wallets_v2_user_id")
  private_key    String? @db.LongText
  public_key     String? @db.LongText
  wallet_address String? @db.LongText
}

model fuel_wallets_v2 {
  id             String  @id
  user_id        String  @unique(map: "uni_fuel_wallets_v2_user_id")
  private_key    String? @db.LongText
  public_key     String? @db.LongText
  wallet_address String? @db.LongText
}

model gst_details_v2 {
  id                   BigInt    @id @default(autoincrement())
  user_id              String?   @db.LongText
  transaction_id       BigInt?
  invoice_date         String?   @db.LongText
  place_of_supply      String?   @db.LongText
  deposited_amount     Float?
  exclusive_gst_amount Float?
  sgst                 Float?
  cgst                 Float?
  igst                 Float?
  gst_invoice          String?   @db.LongText
  created_at           DateTime? @default(now()) @db.Timestamp(0)
  updated_at           DateTime? @default(now()) @db.Timestamp(0)
}

model interest_categories_v2 {
  id                 BigInt               @id @default(autoincrement())
  name               String               @unique(map: "uni_interest_categories_v2_name")
  image_url          String?              @db.LongText
  created_at         DateTime             @default(now()) @db.Timestamp(0)
  updated_at         DateTime?            @default(now()) @db.Timestamp(0)
  selected_image_url String?              @db.LongText
  polls_interests_v2 polls_interests_v2[]
  user_interests_v2  user_interests_v2[]
}

model kyc_details_v2 {
  id             BigInt    @id @default(autoincrement())
  user_id        String    @unique(map: "idx_kyc_user")
  full_name      String?   @db.LongText
  dob            String?   @db.LongText
  pan_detail     String    @unique(map: "idx_kyc_pan") @db.VarChar(10)
  aadhar_detail  String?   @db.LongText
  state          String?   @db.LongText
  gender         String?   @db.LongText
  payment_method String?   @db.LongText
  account_number String?   @db.LongText
  ifsc_code      String?   @db.LongText
  upi_id         String?   @db.LongText
  kyc_status     String?   @db.LongText
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @default(now()) @db.Timestamp(0)
  users_v2       users_v2  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_kyc_details_v2_user")
}

model migrate_old_users_v2 {
  id                 BigInt    @id @default(autoincrement())
  old_user_id        String?   @unique(map: "uni_migrate_old_users_v2_old_user_id")
  new_user_id        String?   @unique(map: "uni_migrate_old_users_v2_new_user_id")
  old_wallet_balance Float?
  transaction_id     BigInt?
  created_at         DateTime? @default(now()) @db.Timestamp(0)
}

model notification_history_v2 {
  id                     BigInt    @id @default(autoincrement())
  user_id                String?   @unique(map: "uni_notification_history_v2_user_id")
  last_notification_sent DateTime?
  users_v2               users_v2? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_notification_history_v2_user")
}

model poll_contracts_v2 {
  poll_id     BigInt  @id @default(autoincrement())
  contract_id String? @db.LongText
}

model poll_market_price_v2 {
  id         BigInt    @id @default(autoincrement())
  poll_id    BigInt?
  yes_price  Float?
  no_price   Float?
  created_at DateTime? @default(now()) @db.Timestamp(0)

  @@index([poll_id], map: "poll_id")
}

model poll_status_v2 {
  id             BigInt   @id @default(autoincrement())
  poll_id        BigInt
  approved_by    Json?
  approval_count BigInt?
  reject_count   BigInt?
  reviewed_by    Json?
  status         String?  @default("in_review")
  poll           Bytes?
  polls_v2       polls_v2 @relation(fields: [poll_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_poll_status_v2_poll")

  @@index([poll_id], map: "fk_poll_status_v2_poll")
}

model polls_interests_v2 {
  id                     BigInt                  @id @default(autoincrement())
  content_id             BigInt?
  interest_id            BigInt?
  created_at             DateTime?               @default(now()) @db.Timestamp(0)
  updated_at             DateTime?               @default(now()) @db.Timestamp(0)
  fact_based_content     Bytes
  polls_v2               polls_v2?               @relation(fields: [content_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_polls_interests_v2_fact_based_content")
  interest_categories_v2 interest_categories_v2? @relation(fields: [interest_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_polls_interests_v2_interest_category")

  @@unique([content_id, interest_id], map: "idx_pollinterests_pollid_interestid")
  @@index([interest_id], map: "fk_polls_interests_v2_interest_category")
}

model polls_v2 {
  id                 BigInt               @id @default(autoincrement())
  title              String?              @db.LongText
  subtitle           String?              @db.LongText
  description        String?              @db.LongText
  stats              String?              @db.LongText
  match_id           BigInt?
  price              Json?
  category           String?
  image_url          String?
  results            String?
  is_featured        Boolean?             @default(false)
  hashtags           String?              @db.LongText
  subcategory        String?              @db.LongText
  range              BigInt?              @default(1)
  expiry             DateTime?            @db.Timestamp(0)
  expiry_seconds     Float?
  settlement_date    DateTime?            @db.Timestamp(0)
  trading_volume     Float?
  source             String?              @db.LongText
  resolution         String?              @db.LongText
  is_orderbook_event Boolean?
  trade_types        String?              @db.LongText
  country            String?              @default("India")
  created_at         DateTime?            @db.Timestamp(0)
  updated_at         DateTime?            @default(now()) @db.Timestamp(0)
  total_votes        BigInt?
  status             String?              @default("in_review")
  creator_id         String?              @db.LongText
  poll_status_v2     poll_status_v2[]
  polls_interests_v2 polls_interests_v2[]
  transactions_v2    transactions_v2[]
  votes_v2           votes_v2[]
}

model referral_details_v2 {
  id                    BigInt    @id @default(autoincrement())
  user_id               String?
  referred_by           String?   @db.LongText
  is_sucessful_referral Boolean?
  referrer_txn_id       BigInt?
  referee_txn_id        BigInt?
  created_at            DateTime? @default(now()) @db.Timestamp(0)
  updated_at            DateTime? @default(now()) @db.Timestamp(0)
  fiat_percentage       Float?
  token_percentage      Float?
  bonus_redeemed        Boolean?
  type                  String?   @db.LongText
  users_v2              users_v2? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_referral_details_v2_user")

  @@index([user_id], map: "fk_referral_details_v2_user")
}

model referral_tokens_v2 {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  token            String    @unique(map: "uni_referral_tokens_v2_token")
  amount           Float?
  expiry           DateTime?
  usage_count      BigInt?   @default(0)
  max_usage_count  BigInt?
  created_at       DateTime? @default(now()) @db.Timestamp(0)
  updated_at       DateTime? @default(now()) @db.Timestamp(0)
  fiat_percentage  Float?
  token_percentage Float?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model tds_certificate_v2 {
  user_id           String?   @db.LongText
  financial_year    String?   @db.LongText
  financial_quarter String?   @db.LongText
  email_id          String?   @db.LongText
  created_at        DateTime? @default(now()) @db.Timestamp(0)
  updated_at        DateTime? @default(now()) @db.Timestamp(0)

  @@ignore
}

model transactions {
  id                       BigInt    @id @default(autoincrement())
  user_id                  String?
  transaction_id           String?
  fiat_amount              Float?
  type                     String?   @db.LongText
  poll_id                  BigInt?
  fact_based_content_id    BigInt?
  fact_based_content_id_v2 BigInt?
  coin_amount              Float?
  transaction_status       String?   @db.LongText
  created_at               DateTime? @default(now()) @db.Timestamp(0)
  updated_at               DateTime? @default(now()) @db.Timestamp(0)
  users                    users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions_user")

  @@index([user_id], map: "fk_transactions_user")
}

model transactions_v2 {
  id                     BigInt    @id @default(autoincrement())
  user_id                String?
  transaction_id         String?
  amount                 String?   @db.LongText
  type                   String?   @db.LongText
  poll_id                BigInt?
  order_id               String?   @db.LongText
  transaction_status     String?   @db.LongText
  commision              Float?
  created_at             DateTime? @default(now()) @db.Timestamp(0)
  updated_at             DateTime? @default(now()) @db.Timestamp(0)
  chain_transaction_hash String?   @db.LongText
  cf_odrder_id           String?
  tds_deducted           Float?
  place_of_supply        String?   @db.LongText
  polls                  Bytes?
  amount_usd             Float?
  chain                  String?   @db.LongText
  to_address             String?   @db.LongText
  from_address           String?   @db.LongText
  transaction_hash       String?   @db.LongText
  feul_transaction_hash  String?   @db.LongText
  fuel_transaction_hash  String?   @db.LongText
  polls_v2               polls_v2? @relation(fields: [poll_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions_v2_polls")
  users_v2               users_v2? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions_v2_user")

  @@index([poll_id], map: "fk_transactions_v2_polls")
  @@index([user_id], map: "fk_transactions_v2_user")
}

model tweet_bonus_v2 {
  id         BigInt    @id @default(autoincrement())
  user_id    String?   @unique(map: "user_id")
  created_at DateTime? @default(now()) @db.Timestamp(0)
}

model txn_summary_on_financial_years {
  id                BigInt    @id @default(autoincrement())
  user_id           String?   @db.LongText
  opening_balance   Float?
  closing_balance   Float?
  total_deposits    Float?
  total_withdrawals Float?
  total_tds_paid    Float?
  pan_number        String?   @db.LongText
  financial_year    String?   @db.LongText
  created_at        DateTime? @default(now()) @db.Timestamp(0)
  updated_at        DateTime? @default(now()) @db.Timestamp(0)
}

model user_interests_v2 {
  id                     BigInt                  @id @default(autoincrement())
  user_id                String?
  interest_id            BigInt?
  created_at             DateTime?               @default(now()) @db.Timestamp(0)
  updated_at             DateTime?               @default(now()) @db.Timestamp(0)
  interest_categories_v2 interest_categories_v2? @relation(fields: [interest_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_interests_v2_interest_category")
  users_v2               users_v2?               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_interests_v2_user")

  @@unique([user_id, interest_id], map: "idx_userinterests_userid_interestid")
  @@index([interest_id], map: "fk_user_interests_v2_interest_category")
}

model user_role_v2 {
  id       BigInt     @id @default(autoincrement())
  role     String?    @db.LongText
  users_v2 users_v2[]
}

model users {
  id             String         @id @unique(map: "uni_users_id")
  login_type     String?        @db.LongText
  wallet_balance Float?
  email          String?        @db.LongText
  transactions   transactions[]
}

model users_role_v2 {
  user_type BigInt  @id @default(autoincrement())
  user_role String? @db.LongText
}

model users_v2 {
  id                      String                   @id @unique(map: "uni_users_v2_id")
  email                   String?                  @db.LongText
  first_name              String?                  @db.LongText
  last_name               String?                  @db.LongText
  mobile_no               String                   @db.LongText
  chain                   String?                  @db.LongText
  profile_url             String?                  @db.LongText
  wallet_balances         String?                  @db.LongText
  user_currency           String?                  @default("USDT")
  country                 String?                  @default("India")
  state                   String?                  @db.LongText
  user_type               BigInt?                  @default(1)
  referral_token          String?                  @default("") @db.VarChar(255)
  notification_token      String?                  @db.LongText
  created_at              DateTime?                @default(now()) @db.Timestamp(0)
  updated_at              DateTime?                @default(now()) @db.Timestamp(0)
  wallet_address          String?                  @db.LongText
  eoa_address             String?                  @db.LongText
  login_type              String?                  @default("Metamask")
  user_role               String?                  @db.LongText
  fuel_wallet_address     String?                  @db.LongText
  deactivate_accounts_v2  deactivate_accounts_v2?
  kyc_details_v2          kyc_details_v2?
  notification_history_v2 notification_history_v2?
  referral_details_v2     referral_details_v2[]
  transactions_v2         transactions_v2[]
  user_interests_v2       user_interests_v2[]
  user_role_v2            user_role_v2?            @relation(fields: [user_type], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_v2_user_role")
  votes_v2                votes_v2[]

  @@index([user_type], map: "fk_users_v2_user_role")
}

model votes_v2 {
  id                     BigInt    @id @default(autoincrement())
  poll_id                BigInt
  user_id                String
  transaction_id         BigInt?
  order_id               String?   @db.LongText
  vote                   String?   @db.LongText
  fiat_amount            Float?
  amount                 String?   @db.LongText
  quantity               Float?
  unmatched_quantity     Float?
  price                  Float?
  prevent_slippage       Boolean?
  vote_type              String?   @db.LongText
  chain_transaction_hash String?   @db.LongText
  created_at             DateTime? @default(now()) @db.Timestamp(0)
  updated_at             DateTime? @default(now()) @db.Timestamp(0)
  poll                   Bytes
  transaction_hash       String?   @db.LongText
  polls_v2               polls_v2  @relation(fields: [poll_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_votes_v2_poll")
  users_v2               users_v2  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_votes_v2_user")

  @@index([poll_id], map: "fk_votes_v2_poll")
  @@index([user_id], map: "fk_votes_v2_user")
}

model yearlry_transaction_summary_v2 {
  id                BigInt    @id @default(autoincrement())
  user_id           String?   @db.LongText
  opening_balance   Float?
  closing_balance   Float?
  total_deposits    Float?
  total_withdrawals Float?
  total_tds_paid    Float?
  pan_number        String?   @db.LongText
  financial_year    String?   @db.LongText
  created_at        DateTime? @default(now()) @db.Timestamp(0)
  updated_at        DateTime? @default(now()) @db.Timestamp(0)
}
